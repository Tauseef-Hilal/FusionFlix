scalar DateTime

type Query {
  greetings: String!
  videos(
    skip: Int
    take: Int
    filter: String
    sortBy: VideoSortByInput
  ): [Video!]!
}

type Mutation {
  register(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  channel: Channel
}

input VideoSortByInput {
  title: SortOrder
  publishedAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

type Video {
  id: ID!
  snippet: VideoSnippet!
  contentDetails: VideoContentDetails!
  statistics: VideoStatistics!
}

type VideoSnippet {
  id: ID!
  url: String!
  title: String!
  description: String!
  publishedAt: DateTime!
  updatedAt: DateTime!
  tags: [String!]!
  thumbnailUrl: String!
  channel: Channel!
  category: Category!
}

type VideoContentDetails {
  id: ID!
  duration: Int!
  hasCaption: Boolean!
}

type VideoStatistics {
  id: ID!
  viewCount: Int!
  likeCount: Int!
  commentCount: Int!
}

type Category {
  id: ID!
  title: String!
  assignable: Boolean
  videos(
    skip: Int
    take: Int
    filter: String
    sortBy: VideoSortByInput
  ): [Video!]!
}

type Channel {
  id: ID!
  snippet: ChannelSnippet!
  statistics: ChannelStatistics!
  videos(
    skip: Int
    take: Int
    filter: String
    sortBy: VideoSortByInput
  ): [Video!]!
}

type ChannelSnippet {
  id: ID!
  title: String!
  description: String!
  country: String!
  keywords: [String!]!
  thumbnailUrl: String!
}

type ChannelStatistics {
  id: ID!
  viewCount: Int!
  subscriberCount: Int!
  videoCount: Int!
}
